name: Build and publish docker image

on: [push]
env:
  NODE_VERSION: 23

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install
      - name: Run linter
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start database
        run: |
          docker compose up -d api-db

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }} # Use your project's Node.js version

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Wait for Postgres to be ready
      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to start..."
          until pg_isready -h localhost -p 20003 -U open-dpp; do
            sleep 1
          done

      # Step 5: Run tests
      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: 20003
          DB_USERNAME: open-dpp
          DB_PASSWORD: open-dpp
          DB_DATABASE: open-dpp
        run: npm test

  build-publish-docker-image:
    runs-on: ubuntu-latest
    needs:
      - test
      - lint
    permissions:
      contents: read      # Required for reading the repository contents
      packages: write     # Required for pushing to GitHub Packages
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get short Git SHA
        id: vars
        run: echo "sha=${{ github.sha }}" >> $GITHUB_ENV

      - name: Build the docker image
        run: |
          docker build -f Dockerfile . -t ghcr.io/${{ github.repository }}:latest -t ghcr.io/${{ github.repository }}:${{ env.sha }}

      - name: Push the docker image
        run: |
          docker push ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:${{ env.sha }}
  
